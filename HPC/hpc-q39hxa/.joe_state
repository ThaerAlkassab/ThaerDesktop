# JOE state file v1.0
search
	pattern "ROMEO"
	replacement "THAER"
	backwards 0
	ignore 0
	replace 1
	block_restrict 0
	regex 0
done
macros
done
files
	"mpi1_b.job\n"
	"transpose_ex.c\n"
	"transpose_ex.c\n"
	"transpose.c\n"
	"numint.c\n"
	"transpose.c\n"
	"transpose.c\n"
	"control.sh\n"
	"control.sh\n"
	"mpi_transpose.c\n"
done
find
	"Q\n"
	"D\n"
	"romeo\n"
	"Romeo\n"
	"ROMEO\n"
	"ROMEO\n"
done
replace
	"y\n"
	"Thaer\n"
	"Thaer\n"
	"THAER\n"
	"THAER\n"
done
run
done
build
done
grep
done
cmd
done
math
done
yank
	". 1."
	"  "
	"."
	"."
	"."
	"z"
	"z"
	"road"
	" "
	" "
	" "
	" "
	"_"
	" "
	" "
	"C"
	"."
	"."
	" "
	" "
	" "
	" "
	" "
	" "
	"H"
	"\n"
	"                "
	"//"
	"1, 0"
	"rank"
	"w"
	"rank"
	"\n                                        "
	"\n"
	"rep"
	"(c%(size-1)+1)"
	"You"
	" "
	"        "
	"2*"
	"min"
	"+"
	"max"
	" / 3"
	" "
	"ess√≥"
	"ie"
	"                "
	"inp"
	"\n"
	"e"
	"  "
	"int g"
	"            "
	"            guess = rand() % ( max - min +1 ) - 1;\n            printf(\"R1: I am guessing %d.\\n\", guess);\n"
	"                    "
	"            MPI_Bcast(&guess, 1, MPI_INT,(c%(size-1)+1), MPI_COMM_WORLD );\n"
	"(c%(size-1)+1)"
	"1"
	"--"
	"#include <stdio.h>\n#include <mpi.h>\n\nint main(int argc, char *argv[]) {\n    int rank, size;\n    int send_data, recv_data;\n    MPI_Status status;\n\n    MPI_Init(&argc, &argv);\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    send_data = rank; // Each process sends its rank\n    MPI_Sendrecv(&send_data, 1, MPI_INT, (rank + 1) % size, 0,\n                 &recv_data, 1, MPI_INT, (rank + size - 1) % size, 0,\n                 MPI_COMM_WORLD, &status);\n\n    printf(\"Process %d received data %d\\n\", rank, recv_data);\n\n    MPI_Finalize();\n\n    return 0;\n}\n"
	"y"
	"#include <stdio.h>\n#include <mpi.h>\n\nint main(int argc, char *argv[]) {\n    int rank, size;\n    int send_data, recv_data;\n    MPI_Status status;\n\n    MPI_Init(&argc, &argv);\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n\n    send_data = rank; // Each process sends its rank\n    MPI_Sendrecv(&send_data, 1, MPI_INT, (rank + 1) % size, 0,\n                 &recv_data, 1, MPI_INT, (rank + size - 1) % size, 1,\n                 MPI_COMM_WORLD, &status);\n\n    printf(\"Process %d received data %d\\n\", rank, recv_data);\n\n    MPI_Finalize();\n\n    return 0;\n}\n"
	"\n"
	"#!/bin/bash\n\n# Run NGUT to get the number of tries\ntries=$(mpirun -n 2 ./NGUT | grep tries | cut -d' ' -f2)\necho \"Number of tries: $tries\"\n\n# Array to store the number of guesses\ndeclare -a guesses_array=()\n\n# Loop to run NGUT 20 times and get the number of guesses\nfor ((i=0; i<20; i++)); do\n    guesses=$(mpirun -n 2 ./NGUT | grep guesses | cut -d' ' -f8)\n    echo \"Guesses: $guesses\"\n    guesses_array+=(\"$guesses\")\ndone\n\n# Calculate the mean\nmean=$(printf '%s\\n' \"${guesses_array[@]}\" | awk '{ total += $1 } END { if (NR > 0) print total/NR }')\necho \"Mean of guesses: $mean\"\n"
	"#!/bin/bash\n\n# Function to run NGUT and extract the number of guesses\nfunction run_NGUT_and_extract_guesses {\n    local guesses=$(mpirun -n 2 ./NGUT | grep guesses | cut -d' ' -f8)\n    echo \"$guesses\"\n}\n\n# Run NGUT to get the number of tries\ntries=$(mpirun -n 2 ./NGUT | grep tries | cut -d' ' -f2)\necho \"Number of tries: $tries\"\n\n# Array to store the number of guesses\ndeclare -a guesses_array=()\n\n# Loop to run NGUT 20 times and get the number of guesses\nfor ((i=0; i<20; i++)); do\n    guesses=$(run_NGUT_and_extract_guesses)\n    echo \"Guesses: $guesses\"\n    guesses_array+=(\"$guesses\")\ndone\n\n# Calculate the sum of guesses\nsum=0\nfor guesses in \"${guesses_array[@]}\"; do\n    ((sum += guesses))\ndone\n\n# Calculate the average\naverage=$(echo \"scale=2; $sum / 20\" | bc)\necho \"Average of guesses: $average\"\n"
	"73"
	" // Change this to any number you want to be guessed"
	" // Process 0 chooses the number"
	"// Process 1 guesses the number"
	" // Random guess between 1 and 100"
	";"
	"3"
	", max"
	"(rand() % 100) + 1"
	"\n            "
	"100) + 1"
	"0"
	"s"
	"2"
	"="
	"homework"
	"        // MPI_Sendrecv ... ?\n"
	"        // MPI_Sendrecv .... ?\n"
	"tasks"
	"ncp"
	"node"
	" -n 4"
	"int"
	"	"
	"	"
	"double"
	"e\n    "
	"	"
	"    double start = gettime"
	"\n\n"
	"100000 1000000 10000000"
	"111"
	"   "
done
file_pos
	0 "helloworld.bash"
	0 "bcast"
	8 "bcast.sh"
	8 "bcast.c"
	46 "number_guessing_bcast.c"
	68 "number_guessing_mpi_2.c"
	0 "try20.sh"
	0 "number_guessing_mpi.c"
	61 "number_guessing_mpi_sendrecv.c"
	0 "p2p.c"
	34 "ping_pong.c"
	13 "sleep.sh"
	0 "mpi1.job"
	12 "mpi1_b.job"
	3 "transpose_ex.c"
	0 "numint.c"
	115 "transpose.c"
	2 "control.sh"
	131 "mpi_transpose.c"
done
colors
	"xterm" "default"
done
